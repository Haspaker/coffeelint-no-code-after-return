// Generated by CoffeeScript 1.12.0
(function() {
  var NoCodeAfterReturn;

  module.exports = NoCodeAfterReturn = (function() {
    function NoCodeAfterReturn() {}

    NoCodeAfterReturn.prototype.rule = {
      name: 'no_code_after_return',
      level: 'warn',
      message: 'Dead Code',
      description: 'Detects dead code after return statements'
    };

    NoCodeAfterReturn.prototype.debugNode = function(node) {
      if (node == null) {
        return;
      }
      console.log(node.constructor.name);
      console.log(node);
      console.log('------------------------------');
      return console.log;
    };

    NoCodeAfterReturn.prototype.deadCodeError = function(node, astApi) {
      return this.errors.push(astApi.createError({
        context: node.variable,
        lineNumber: node.locationData.first_line + 1,
        lineNumberEnd: node.locationData.last_line + 1
      }));
    };

    NoCodeAfterReturn.prototype.lintIf = function(ifExp, astApi) {
      var bodyHasReturn, elseHasReturn;
      bodyHasReturn = this.lintExpressions(ifExp.body.expressions, astApi);
      if (ifExp.elseBody != null) {
        elseHasReturn = this.lintExpressions(ifExp.elseBody.expressions, astApi);
        return bodyHasReturn && elseHasReturn;
      }
    };

    NoCodeAfterReturn.prototype.lintReturn = function(retExp, astApi) {
      if (retExp.expression != null) {
        this.lintExpression(retExp.expression, astApi);
      }
      return true;
    };

    NoCodeAfterReturn.prototype.lintCall = function(callExp, astApi) {
      return callExp.args.forEach((function(_this) {
        return function(arg) {
          return _this.lintExpression(arg, astApi);
        };
      })(this));
    };

    NoCodeAfterReturn.prototype.lintExpression = function(exp, astApi) {
      var ref;
      if (exp.constructor.name === 'Return') {
        return this.lintReturn(exp, astApi);
      } else if (exp.constructor.name === 'If') {
        return this.lintIf(exp, astApi);
      } else if (exp.constructor.name === 'For' && (exp.guard == null)) {
        return this.lintCode(exp, astApi);
      } else if ((ref = exp.constructor.name) === 'While' || ref === 'Code') {
        return this.lintCode(exp, astApi);
      } else if (exp.constructor.name === 'Call') {
        return this.lintCall(exp, astApi);
      }
    };

    NoCodeAfterReturn.prototype.lintExpressions = function(expressions, astApi) {
      var isAfterReturn;
      isAfterReturn = null;
      expressions.forEach((function(_this) {
        return function(exp) {
          if (isAfterReturn) {
            _this.deadCodeError(exp, astApi);
          }
          return isAfterReturn || (isAfterReturn = _this.lintExpression(exp, astApi));
        };
      })(this));
      return isAfterReturn;
    };

    NoCodeAfterReturn.prototype.lintCode = function(code, astApi) {
      return this.lintExpressions(code.body.expressions, astApi);
    };

    NoCodeAfterReturn.prototype.lintNode = function(node, astApi) {
      node.traverseChildren(false, (function(_this) {
        return function(child) {
          if (child.constructor.name === 'Code') {
            return _this.lintCode(child, astApi);
          }
        };
      })(this));
    };

    NoCodeAfterReturn.prototype.lintAST = function(node, astApi) {
      return this.lintNode(node, astApi);
    };

    return NoCodeAfterReturn;

  })();

}).call(this);
